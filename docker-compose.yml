version: '3.1'
services:
  adminer:
    image: adminer:latest
    container_name: adminer
    ports:
      - 8080:8080
    networks:
      - django-network

  postgres:
    image: postgres:latest
    container_name: postgres
    restart: always
    ports:
      - 5432:5432
    volumes:
      - ./docker/postgresql/data:/var/lib/postgresql/data
      # Initialization script, might not be required
      - ./docker/postgresql/init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    networks:
      - django-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5

  django:
    build: ./skills_DS
    container_name: django
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - 8000:8000
    volumes:
      - ./skills_DS:/app/django
    environment:
      - DB_NAME
      - DB_USER
      - DB_PASSWORD
      - DB_HOST
      - DB_PORT
      - RECAPTCHA_PUBLIC_KEY
      - RECAPTCHA_PRIVATE_KEY
      - EMAIL_HOST_USER
      - EMAIL_HOST_PASSWORD
    networks:
      - django-network
    command: [ "python", "manage.py", "runserver", "0.0.0.0:8000" ]

  react:
    build: ./skills_DS/react
    container_name: react
    restart: always
    volumes:
      - ./skills_DS/react:/app/react
    environment:
      - GOOGLE_MAPS_KEY
    networks:
      - django-network
    command: [ "npm", "start" ]

networks:
  django-network:
    driver: bridge
